{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"adrs/","text":"Architectural Decision Records (ADRs) \u00b6 ADRs are a record of the arguments and decisions made to change process or software architecture. The idea is for these records to be regularly reviewed, updated, and documented so that new people or external parties to a project can read along and understand the points of a decision, the context, and in general can make educated decisions based on previous discussions. ADRs provide a safer place for individuals who would rather not speak up in face to face communication (which can feel confrontational) or would like to educate themselves on a topic before commenting. Documenting Architecture Decisions \u00b6 In Documenting Architecture Decisions Michael Nygard explains the concept as small, easy to read and update documents which give context to a decision. He further explains the alternative (when the context for decisions is lost) as \"Blindly accept the decision.\" or \"Blindly change it.\". We agree with this point and have thus generated our own process for implementing this concept. Architectural \u00b6 Micheal defines \"Architectural\" as decisions which \"affect the structure, non-functional characteristics, dependencies, interfaces, or construction techniques\" for a project. Our definition is a a bit less structured, essentially if it comes up in a design discussion we want to keep track of it. Versioning \u00b6 Michael states that the file names give no context (are simply numbered) and are never altered once resolved, because \"It's still relevant to know that it was the decision, but is no longer the decision.\". We are choosing to place our ADRs in a version control system where the history of the decision can be queried in the versions of the document itself. This is handy because it lowers the total number of docs that will accumulate and allows us to give the files contextual names. Our file names can summarize the decision they contain so that readers can easily find and reference that decision. Status Types \u00b6 Michael gives four potential statuses for an ADR: \"proposed\", \"accepted\", \"deprecated\", and \"superseded\". Since we are versioning our ADRs and using PRs, we only need \"accepted\", \"rejected\", and \"superseded\", affording us a simpler model. Changes which are in review are handled in PRs, the review is finalized after a period of time with the status of \"accepted\" or \"rejected\". If a decision supersedes another we change the superseded decision's status to \"superseded by doc \" where the doc is a link to the decision which superseded it. Context should be given as to why it is superseded in both the superseded decision in the one superseding. Tools \u00b6 A command line tool for ADRs is available to help manage the complexity of altering or finding a decision. Our model makes such tools a bit less useful, preferring the use of the tools built into the source code management system. Process \u00b6 The process of preparing, documenting, and presenting a decision should be easy and straightforward, we don't want this process to encumber our ability to change, but enable educated decisions. Issue \u00b6 The goal of an issue isn't whether or not to accept or reject a decision. The goal of an issue is to decide whether or not a decision needs to be made. Generate an Issue if: - you have a question or need context about a decision - you have a suggestion which might need a decision to be made - you believe additional context might change a decision Pull Request \u00b6 Generate a PR if: - you have additional context for a decision - a decision was made and there is no ADR for it - you brought up a decision in a design discussion and a change was suggested Pull requests are more closely tied to the file version than Issues, so we prefer conversations about the decision to be in the Pull Request, where it can more easily be found. Step By Step Process for a new ADR \u00b6 You have an idea to improve a process, design, etc Document the idea to present in the design discussion there is a format for this to help you get started create a pull request for the decision with the outcome you would like (approved/rejected) Link the new PR in the discuss-rancher-k3s-rke2 slack channel and notify the team Present the idea in the design discussion meeting Record any context brought forward in the design discussion this should result in a update to the PR Wait one week this gives everyone who would like to comment in the PR the ability to do so add any added context from the comments to the PR Present the outcome of the decision in the next design discussion if new context is brought forward, record it, add it to the PR, and wait another week repeat this process until there is no new context each week you present the ADR make sure to link in slack and notify the team finalize the decision by merging the PR merging should still have the normal requirements (2 approvals and passing CI) Step By Step Process for updating an ADR \u00b6 You have some new context on an existing decision Generate a PR to add the context Merge after the normal requirements (2 approvals and CI passes) this process should not alter the decision, only add context to it any time the decision's status should change, please make sure the team is aware and has had time to discuss. Step By Step Process for revisiting an ADR \u00b6 You disagree with the decision section of an ADR maybe this is due to some new context that you added The decision was made greater than a week ago (the ADR PR should have merged > 7 days ago) this really only applies if there was no new context if you have new context for a decision there should not be any waiting to present a change in the decision this is meant to prevent excessive decision changes, not slow down any necessary change Generate a PR to change the decision section of the ADR Present your point of view in the next design discussion Add any context discovered from the discussion to the PR Highlight the change in slack and notify the team Wait one week Update the PR with any context added in the PR discussion Present the outcome of the decision in the next design discussion Finalize the change by merging the PR if the change is not agreed upon and no context was added then don't merge and close the PR merging should still have the normal requirements (2 approvals and passing CI)","title":"Architectural Decision Records (ADRs)"},{"location":"adrs/#architectural-decision-records-adrs","text":"ADRs are a record of the arguments and decisions made to change process or software architecture. The idea is for these records to be regularly reviewed, updated, and documented so that new people or external parties to a project can read along and understand the points of a decision, the context, and in general can make educated decisions based on previous discussions. ADRs provide a safer place for individuals who would rather not speak up in face to face communication (which can feel confrontational) or would like to educate themselves on a topic before commenting.","title":"Architectural Decision Records (ADRs)"},{"location":"adrs/#documenting-architecture-decisions","text":"In Documenting Architecture Decisions Michael Nygard explains the concept as small, easy to read and update documents which give context to a decision. He further explains the alternative (when the context for decisions is lost) as \"Blindly accept the decision.\" or \"Blindly change it.\". We agree with this point and have thus generated our own process for implementing this concept.","title":"Documenting Architecture Decisions"},{"location":"adrs/#architectural","text":"Micheal defines \"Architectural\" as decisions which \"affect the structure, non-functional characteristics, dependencies, interfaces, or construction techniques\" for a project. Our definition is a a bit less structured, essentially if it comes up in a design discussion we want to keep track of it.","title":"Architectural"},{"location":"adrs/#versioning","text":"Michael states that the file names give no context (are simply numbered) and are never altered once resolved, because \"It's still relevant to know that it was the decision, but is no longer the decision.\". We are choosing to place our ADRs in a version control system where the history of the decision can be queried in the versions of the document itself. This is handy because it lowers the total number of docs that will accumulate and allows us to give the files contextual names. Our file names can summarize the decision they contain so that readers can easily find and reference that decision.","title":"Versioning"},{"location":"adrs/#status-types","text":"Michael gives four potential statuses for an ADR: \"proposed\", \"accepted\", \"deprecated\", and \"superseded\". Since we are versioning our ADRs and using PRs, we only need \"accepted\", \"rejected\", and \"superseded\", affording us a simpler model. Changes which are in review are handled in PRs, the review is finalized after a period of time with the status of \"accepted\" or \"rejected\". If a decision supersedes another we change the superseded decision's status to \"superseded by doc \" where the doc is a link to the decision which superseded it. Context should be given as to why it is superseded in both the superseded decision in the one superseding.","title":"Status Types"},{"location":"adrs/#tools","text":"A command line tool for ADRs is available to help manage the complexity of altering or finding a decision. Our model makes such tools a bit less useful, preferring the use of the tools built into the source code management system.","title":"Tools"},{"location":"adrs/#process","text":"The process of preparing, documenting, and presenting a decision should be easy and straightforward, we don't want this process to encumber our ability to change, but enable educated decisions.","title":"Process"},{"location":"adrs/#issue","text":"The goal of an issue isn't whether or not to accept or reject a decision. The goal of an issue is to decide whether or not a decision needs to be made. Generate an Issue if: - you have a question or need context about a decision - you have a suggestion which might need a decision to be made - you believe additional context might change a decision","title":"Issue"},{"location":"adrs/#pull-request","text":"Generate a PR if: - you have additional context for a decision - a decision was made and there is no ADR for it - you brought up a decision in a design discussion and a change was suggested Pull requests are more closely tied to the file version than Issues, so we prefer conversations about the decision to be in the Pull Request, where it can more easily be found.","title":"Pull Request"},{"location":"adrs/#step-by-step-process-for-a-new-adr","text":"You have an idea to improve a process, design, etc Document the idea to present in the design discussion there is a format for this to help you get started create a pull request for the decision with the outcome you would like (approved/rejected) Link the new PR in the discuss-rancher-k3s-rke2 slack channel and notify the team Present the idea in the design discussion meeting Record any context brought forward in the design discussion this should result in a update to the PR Wait one week this gives everyone who would like to comment in the PR the ability to do so add any added context from the comments to the PR Present the outcome of the decision in the next design discussion if new context is brought forward, record it, add it to the PR, and wait another week repeat this process until there is no new context each week you present the ADR make sure to link in slack and notify the team finalize the decision by merging the PR merging should still have the normal requirements (2 approvals and passing CI)","title":"Step By Step Process for a new ADR"},{"location":"adrs/#step-by-step-process-for-updating-an-adr","text":"You have some new context on an existing decision Generate a PR to add the context Merge after the normal requirements (2 approvals and CI passes) this process should not alter the decision, only add context to it any time the decision's status should change, please make sure the team is aware and has had time to discuss.","title":"Step By Step Process for updating an ADR"},{"location":"adrs/#step-by-step-process-for-revisiting-an-adr","text":"You disagree with the decision section of an ADR maybe this is due to some new context that you added The decision was made greater than a week ago (the ADR PR should have merged > 7 days ago) this really only applies if there was no new context if you have new context for a decision there should not be any waiting to present a change in the decision this is meant to prevent excessive decision changes, not slow down any necessary change Generate a PR to change the decision section of the ADR Present your point of view in the next design discussion Add any context discovered from the discussion to the PR Highlight the change in slack and notify the team Wait one week Update the PR with any context added in the PR discussion Present the outcome of the decision in the next design discussion Finalize the change by merging the PR if the change is not agreed upon and no context was added then don't merge and close the PR merging should still have the normal requirements (2 approvals and passing CI)","title":"Step By Step Process for revisiting an ADR"},{"location":"adrs/001-record-architecture-decisions/","text":"1. Record architecture decisions \u00b6 Date: 2022-01-26 Status \u00b6 Accepted Context \u00b6 We need to record the architectural decisions made on this project. Decision \u00b6 We will use Architecture Decision Records, as described by Michael Nygard . Consequences \u00b6 See Michael Nygard's article, linked above. For a lightweight ADR toolset, see Nat Pryce's adr-tools .","title":"1. Record architecture decisions"},{"location":"adrs/001-record-architecture-decisions/#1-record-architecture-decisions","text":"Date: 2022-01-26","title":"1. Record architecture decisions"},{"location":"adrs/001-record-architecture-decisions/#status","text":"Accepted","title":"Status"},{"location":"adrs/001-record-architecture-decisions/#context","text":"We need to record the architectural decisions made on this project.","title":"Context"},{"location":"adrs/001-record-architecture-decisions/#decision","text":"We will use Architecture Decision Records, as described by Michael Nygard .","title":"Decision"},{"location":"adrs/001-record-architecture-decisions/#consequences","text":"See Michael Nygard's article, linked above. For a lightweight ADR toolset, see Nat Pryce's adr-tools .","title":"Consequences"},{"location":"adrs/002-rke2-rpm-support/","text":"2. RPM support for RKE2 \u00b6 Date: 2022-01-20 Status \u00b6 Accepted Context \u00b6 RKE2 publishes RPMs for distribution of RKE2 through the https://github.com/rancher/rke2-packaging repository. These RPMs are built using automated calls to rpmbuild and corresponding GPG signing/publishing plugins, and publish RPMs to the rpm.rancher.io / rpm-testing.rancher.io S3-backed buckets. Decision \u00b6 Until a more robust RPM building/mechanism is established for RKE2, we will not add any new platforms for RPM publishing beyond the existing CentOS/RHEL 7 and 8 RPMs that are published. We will publish selinux policy RPMs for new platforms as needed, and ensure the selinux RPMs are compatible with the tarball installation method for the platform in question. This decision can be re-evaluated in the future if a more robust RPM publishing technique/platform is developed/made available. Consequences \u00b6 The only supported installation method for all platforms except CentOS 7/8 with selinux support will be a combination of the use of a tarball install in conjunction with an selinux policy RPM.","title":"2. RPM support for RKE2"},{"location":"adrs/002-rke2-rpm-support/#2-rpm-support-for-rke2","text":"Date: 2022-01-20","title":"2. RPM support for RKE2"},{"location":"adrs/002-rke2-rpm-support/#status","text":"Accepted","title":"Status"},{"location":"adrs/002-rke2-rpm-support/#context","text":"RKE2 publishes RPMs for distribution of RKE2 through the https://github.com/rancher/rke2-packaging repository. These RPMs are built using automated calls to rpmbuild and corresponding GPG signing/publishing plugins, and publish RPMs to the rpm.rancher.io / rpm-testing.rancher.io S3-backed buckets.","title":"Context"},{"location":"adrs/002-rke2-rpm-support/#decision","text":"Until a more robust RPM building/mechanism is established for RKE2, we will not add any new platforms for RPM publishing beyond the existing CentOS/RHEL 7 and 8 RPMs that are published. We will publish selinux policy RPMs for new platforms as needed, and ensure the selinux RPMs are compatible with the tarball installation method for the platform in question. This decision can be re-evaluated in the future if a more robust RPM publishing technique/platform is developed/made available.","title":"Decision"},{"location":"adrs/002-rke2-rpm-support/#consequences","text":"The only supported installation method for all platforms except CentOS 7/8 with selinux support will be a combination of the use of a tarball install in conjunction with an selinux policy RPM.","title":"Consequences"},{"location":"adrs/003-rke2-rpm-sle-support/","text":"3. RPM SLE support for RKE2 \u00b6 Date: 2022-01-27 Status \u00b6 Accepted Context \u00b6 RKE2 publishes RPMs for SUSE OS distributions, the rpms will be installed via transactional updates if exists, this will enable two things, the installation of rke2-selinux and the extraction of the binaries in the right /usr paths instead of the alternative tarball installation which will extract the binaries in /opt . Decision \u00b6 We will add support for RPM publishing for SUSE OS distributions in rke2-packaging repo, the rke2-server and rke2-agent packages will require installing rke2-common which will in turn install the rke2-selinux RPM package which is already supported for microos. The decision will involve defaulting to the tarball installation for SUSE OS distribution in the installation script to prevent breaking current compatibility with users who currently installed via tarball installation, the RPM installation will be allowed via passing the environment variable RKE2_INSTALL_METHOD=rpm to the install script. The installation script will also have measures to prevent installation switching from RPM to tarball installation and vice versa, and finally the installation via the tarball method will not allow SELINUX to be enabled unless manually. Consequences \u00b6 The decision will result in some drawbacks: The decision will not enable RPM installation by default. The tarball installation will not enable SELINUX by default.","title":"3. RPM SLE support for RKE2"},{"location":"adrs/003-rke2-rpm-sle-support/#3-rpm-sle-support-for-rke2","text":"Date: 2022-01-27","title":"3. RPM SLE support for RKE2"},{"location":"adrs/003-rke2-rpm-sle-support/#status","text":"Accepted","title":"Status"},{"location":"adrs/003-rke2-rpm-sle-support/#context","text":"RKE2 publishes RPMs for SUSE OS distributions, the rpms will be installed via transactional updates if exists, this will enable two things, the installation of rke2-selinux and the extraction of the binaries in the right /usr paths instead of the alternative tarball installation which will extract the binaries in /opt .","title":"Context"},{"location":"adrs/003-rke2-rpm-sle-support/#decision","text":"We will add support for RPM publishing for SUSE OS distributions in rke2-packaging repo, the rke2-server and rke2-agent packages will require installing rke2-common which will in turn install the rke2-selinux RPM package which is already supported for microos. The decision will involve defaulting to the tarball installation for SUSE OS distribution in the installation script to prevent breaking current compatibility with users who currently installed via tarball installation, the RPM installation will be allowed via passing the environment variable RKE2_INSTALL_METHOD=rpm to the install script. The installation script will also have measures to prevent installation switching from RPM to tarball installation and vice versa, and finally the installation via the tarball method will not allow SELINUX to be enabled unless manually.","title":"Decision"},{"location":"adrs/003-rke2-rpm-sle-support/#consequences","text":"The decision will result in some drawbacks: The decision will not enable RPM installation by default. The tarball installation will not enable SELINUX by default.","title":"Consequences"},{"location":"adrs/004-servicelb-support/","text":"Support for ServiceLB Load-Balancer Controller in RKE2 \u00b6 Date: 2022-09-30 Status \u00b6 Accepted Context \u00b6 RKE2 does not currently bundle a load-balancer controller. Users that want to deploy Services of type LoadBalancer must deploy a real cloud-provider chart, or use an alternative such as MetalLB or Kube-VIP. Decision \u00b6 Taking advantage of recent changes to move ServiceLB into the K3s stub cloud-provider , we will allow RKE2 to run ServiceLB as part of a proper clould controller integration. This will require adding CLI flags to enable servicelb, as well as exposing existing K3s flags to configure its namespace. Running servicelb will be opt-in, behind a new flag, to avoid changing behavior on existing clusters. Consequences \u00b6 RKE2 uses less resources when ServiceLB is disabled, as several core controllers are no longer started unconditionally. The --disable-cloud-controller flag now disables the CCM's cloud-node and cloud-node-lifecycle controllers that were historically the only supported controllers. The --enable-servicelb flag now prevents --disable=servicelb from being passed in to K3s, which in turn enables the CCM's service controller. If the cloud-controller and servicelb are both disabled, the cloud-controller-manager is not run at all. The K3s --servicelb-namespace flag is now passed through instead of dropped.","title":"Support for ServiceLB Load-Balancer Controller in RKE2"},{"location":"adrs/004-servicelb-support/#support-for-servicelb-load-balancer-controller-in-rke2","text":"Date: 2022-09-30","title":"Support for ServiceLB Load-Balancer Controller in RKE2"},{"location":"adrs/004-servicelb-support/#status","text":"Accepted","title":"Status"},{"location":"adrs/004-servicelb-support/#context","text":"RKE2 does not currently bundle a load-balancer controller. Users that want to deploy Services of type LoadBalancer must deploy a real cloud-provider chart, or use an alternative such as MetalLB or Kube-VIP.","title":"Context"},{"location":"adrs/004-servicelb-support/#decision","text":"Taking advantage of recent changes to move ServiceLB into the K3s stub cloud-provider , we will allow RKE2 to run ServiceLB as part of a proper clould controller integration. This will require adding CLI flags to enable servicelb, as well as exposing existing K3s flags to configure its namespace. Running servicelb will be opt-in, behind a new flag, to avoid changing behavior on existing clusters.","title":"Decision"},{"location":"adrs/004-servicelb-support/#consequences","text":"RKE2 uses less resources when ServiceLB is disabled, as several core controllers are no longer started unconditionally. The --disable-cloud-controller flag now disables the CCM's cloud-node and cloud-node-lifecycle controllers that were historically the only supported controllers. The --enable-servicelb flag now prevents --disable=servicelb from being passed in to K3s, which in turn enables the CCM's service controller. If the cloud-controller and servicelb are both disabled, the cloud-controller-manager is not run at all. The K3s --servicelb-namespace flag is now passed through instead of dropped.","title":"Consequences"},{"location":"adrs/adr-template/","text":"ADR Format Template \u00b6 This template provides a canvas for generating ADRs and a standard format so that we can build tools to parse them. - notes are added to this template to help elaborate on the points without a separate document - notes will be prefixed with a dash Established \u00b6 2022-07-20 - this section should contain only the YYYY-MM-DD date of when the decision is considered final - this can be added after context is given, in the PR which will wait for 1 week before merge Revisit by \u00b6 2023-07-15 - this section should contain only the YYYY-MM-DD date of when the decision is considered stale - at the next design discussion we should validate and renew this date Subject \u00b6 Given data , when triggering event , then we do something . the person should be first person plural \"we\" do something not \"I\", \"you\", or \"they\" the tense should be simple present , we \"do\" something not \"does\", \"doing\", \"did\", or \"done\" the mood should be indicative we \"do\" something not \"go do\" Given when then statements should be used as often as possible to get as much context into the subject as possible. Don't force 'given, when, then'; if there is no triggering event or no data given, then leave those parts out. Status \u00b6 Accepted / Rejected / Superseded by #other-issue - accepted is the decision that the subject is appropriate and we will do it. - rejected is the decision that the subject isn't appropriate and we won't do it. - superseded relates that a different decision forces this decision (for instance a decision made at a higher level of abstraction) Context \u00b6 the following is a simple framework for judging a decision, these items are not required, but may be useful to the writer. Strength of doing process \u00b6 Weakness of doing process \u00b6 Threats involved in not doing process \u00b6 Threats involved in doing process \u00b6 Opportunities involved in doing process \u00b6 a different approach to context framework Pros \u00b6 Cons \u00b6","title":"ADR Format Template"},{"location":"adrs/adr-template/#adr-format-template","text":"This template provides a canvas for generating ADRs and a standard format so that we can build tools to parse them. - notes are added to this template to help elaborate on the points without a separate document - notes will be prefixed with a dash","title":"ADR Format Template"},{"location":"adrs/adr-template/#established","text":"2022-07-20 - this section should contain only the YYYY-MM-DD date of when the decision is considered final - this can be added after context is given, in the PR which will wait for 1 week before merge","title":"Established"},{"location":"adrs/adr-template/#revisit-by","text":"2023-07-15 - this section should contain only the YYYY-MM-DD date of when the decision is considered stale - at the next design discussion we should validate and renew this date","title":"Revisit by"},{"location":"adrs/adr-template/#subject","text":"Given data , when triggering event , then we do something . the person should be first person plural \"we\" do something not \"I\", \"you\", or \"they\" the tense should be simple present , we \"do\" something not \"does\", \"doing\", \"did\", or \"done\" the mood should be indicative we \"do\" something not \"go do\" Given when then statements should be used as often as possible to get as much context into the subject as possible. Don't force 'given, when, then'; if there is no triggering event or no data given, then leave those parts out.","title":"Subject"},{"location":"adrs/adr-template/#status","text":"Accepted / Rejected / Superseded by #other-issue - accepted is the decision that the subject is appropriate and we will do it. - rejected is the decision that the subject isn't appropriate and we won't do it. - superseded relates that a different decision forces this decision (for instance a decision made at a higher level of abstraction)","title":"Status"},{"location":"adrs/adr-template/#context","text":"the following is a simple framework for judging a decision, these items are not required, but may be useful to the writer.","title":"Context"},{"location":"adrs/adr-template/#strength-of-doing-process","text":"","title":"Strength of doing process"},{"location":"adrs/adr-template/#weakness-of-doing-process","text":"","title":"Weakness of doing process"},{"location":"adrs/adr-template/#threats-involved-in-not-doing-process","text":"","title":"Threats involved in not doing process"},{"location":"adrs/adr-template/#threats-involved-in-doing-process","text":"","title":"Threats involved in doing process"},{"location":"adrs/adr-template/#opportunities-involved-in-doing-process","text":"a different approach to context framework","title":"Opportunities involved in doing process"},{"location":"adrs/adr-template/#pros","text":"","title":"Pros"},{"location":"adrs/adr-template/#cons","text":"","title":"Cons"}]}